
LAB_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000002e8  0000037c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  0080010c  0080010c  00000388  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000978  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006f5  00000000  00000000  00000dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000042f  00000000  00000000  000014b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  000018e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000467  00000000  00000000  000019b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000231  00000000  00000000  00001e17  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002048  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ee       	ldi	r30, 0xE8	; 232
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 31       	cpi	r26, 0x11	; 17
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <main>
  9e:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <debounce_delay>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	2f ef       	ldi	r18, 0xFF	; 255
  a8:	82 e5       	ldi	r24, 0x52	; 82
  aa:	97 e0       	ldi	r25, 0x07	; 7
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	80 40       	sbci	r24, 0x00	; 0
  b0:	90 40       	sbci	r25, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <debounce_delay+0x6>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <debounce_delay+0x10>
  b6:	00 00       	nop
  b8:	08 95       	ret

000000ba <incrementar_contador_1>:
void debounce_delay() {
	_delay_ms(150);
}

void incrementar_contador_1() {
	if(Bandera_2 == 1)
  ba:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <Bandera_2>
  be:	81 30       	cpi	r24, 0x01	; 1
  c0:	a9 f4       	brne	.+42     	; 0xec <incrementar_contador_1+0x32>
	{P1_BLUE++;// Incremento de jugador uno
  c2:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <P1_BLUE>
  c6:	8f 5f       	subi	r24, 0xFF	; 255
  c8:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <P1_BLUE>
	Win_ner = (P1_BLUE > 4) ? 1 : 0; //Determinar ganador
  cc:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <P1_BLUE>
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	95 30       	cpi	r25, 0x05	; 5
  d4:	08 f4       	brcc	.+2      	; 0xd8 <incrementar_contador_1+0x1e>
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	Bandera_2 = (P1_BLUE > 4) ? 0 : 1;// Parar Carrera
  dc:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <P1_BLUE>
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	95 30       	cpi	r25, 0x05	; 5
  e4:	08 f0       	brcs	.+2      	; 0xe8 <incrementar_contador_1+0x2e>
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <Bandera_2>
  ec:	08 95       	ret

000000ee <incrementar_contador_2>:
	}
	
}

void incrementar_contador_2() {
	if(Bandera_2 == 1){
  ee:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <Bandera_2>
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	b1 f4       	brne	.+44     	; 0x122 <incrementar_contador_2+0x34>
	P2_RED++;// Incremento de jugador dos
  f6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <P2_RED>
  fa:	8f 5f       	subi	r24, 0xFF	; 255
  fc:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <P2_RED>
	Win_ner = (P2_RED > 4) ? 2 : 0; //Determinar ganador
 100:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <P2_RED>
 104:	85 30       	cpi	r24, 0x05	; 5
 106:	10 f0       	brcs	.+4      	; 0x10c <incrementar_contador_2+0x1e>
 108:	82 e0       	ldi	r24, 0x02	; 2
 10a:	01 c0       	rjmp	.+2      	; 0x10e <incrementar_contador_2+0x20>
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	Bandera_2 = (P2_RED > 4) ? 0 : 1;// Parar Carrera
 112:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <P2_RED>
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	95 30       	cpi	r25, 0x05	; 5
 11a:	08 f0       	brcs	.+2      	; 0x11e <incrementar_contador_2+0x30>
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <Bandera_2>
 122:	08 95       	ret

00000124 <Winner>:
	}
}

void Winner(){
	if (Win_ner == 1){
 124:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 128:	81 30       	cpi	r24, 0x01	; 1
 12a:	49 f4       	brne	.+18     	; 0x13e <Winner+0x1a>
		// Mostrar valores en Display de Timer (cuenta regresiva)
		PORTC |= (1 << PC5);   // BJT_Display en alto
 12c:	88 b1       	in	r24, 0x08	; 8
 12e:	80 62       	ori	r24, 0x20	; 32
 130:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~((1 << PC3) | (1 << PC4));  // BJT_BLUE y BJT_RED en bajo
 132:	88 b1       	in	r24, 0x08	; 8
 134:	87 7e       	andi	r24, 0xE7	; 231
 136:	88 b9       	out	0x08, r24	; 8
		
		PORTD = fila_1[1];  // Mostrar valores en Display de Timer
 138:	8c e0       	ldi	r24, 0x0C	; 12
 13a:	8b b9       	out	0x0b, r24	; 11
 13c:	08 95       	ret
	}
	else if (Win_ner == 2){
 13e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 142:	82 30       	cpi	r24, 0x02	; 2
 144:	41 f4       	brne	.+16     	; 0x156 <Winner+0x32>
		// Mostrar valores en Display de Timer (cuenta regresiva)
		PORTC |= (1 << PC5);   // BJT_Display en alto
 146:	88 b1       	in	r24, 0x08	; 8
 148:	80 62       	ori	r24, 0x20	; 32
 14a:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~((1 << PC3) | (1 << PC4));  // BJT_BLUE y BJT_RED en bajo
 14c:	88 b1       	in	r24, 0x08	; 8
 14e:	87 7e       	andi	r24, 0xE7	; 231
 150:	88 b9       	out	0x08, r24	; 8
		
		PORTD = fila_1[2];  // Mostrar valores en Display de Timer	
 152:	8b e5       	ldi	r24, 0x5B	; 91
 154:	8b b9       	out	0x0b, r24	; 11
 156:	08 95       	ret

00000158 <__vector_3>:
	}
			
}
	
ISR(PCINT0_vect) {
 158:	1f 92       	push	r1
 15a:	0f 92       	push	r0
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	0f 92       	push	r0
 160:	11 24       	eor	r1, r1
 162:	2f 93       	push	r18
 164:	3f 93       	push	r19
 166:	4f 93       	push	r20
 168:	5f 93       	push	r21
 16a:	6f 93       	push	r22
 16c:	7f 93       	push	r23
 16e:	8f 93       	push	r24
 170:	9f 93       	push	r25
 172:	af 93       	push	r26
 174:	bf 93       	push	r27
 176:	ef 93       	push	r30
 178:	ff 93       	push	r31
	// Comprobar si el botón en PB0 está presionado (PB0 es bajo)
	if (!(PINB & (1 << PB0))) {
 17a:	18 99       	sbic	0x03, 0	; 3
 17c:	08 c0       	rjmp	.+16     	; 0x18e <__vector_3+0x36>
		if (Bandera_2 == 1) {
 17e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <Bandera_2>
 182:	81 30       	cpi	r24, 0x01	; 1
 184:	21 f4       	brne	.+8      	; 0x18e <__vector_3+0x36>
			incrementar_contador_2();
 186:	0e 94 77 00 	call	0xee	; 0xee <incrementar_contador_2>
			debounce_delay();// Antirrebote
 18a:	0e 94 53 00 	call	0xa6	; 0xa6 <debounce_delay>
		}
	}
	
	// Comprobar si el botón en PB1 está presionado (PB1 es bajo)
	if (!(PINB & (1 << PB1))) {
 18e:	19 99       	sbic	0x03, 1	; 3
 190:	08 c0       	rjmp	.+16     	; 0x1a2 <__vector_3+0x4a>
		if (Bandera_2 == 1) {
 192:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <Bandera_2>
 196:	81 30       	cpi	r24, 0x01	; 1
 198:	21 f4       	brne	.+8      	; 0x1a2 <__vector_3+0x4a>
			incrementar_contador_1();
 19a:	0e 94 5d 00 	call	0xba	; 0xba <incrementar_contador_1>
			debounce_delay();// Antirrebote
 19e:	0e 94 53 00 	call	0xa6	; 0xa6 <debounce_delay>
		}
	}

	// Comprobar si el botón en PB2 está presionado (PB2 es bajo)
	if (!(PINB & (1 << PB2))) {
 1a2:	1a 99       	sbic	0x03, 2	; 3
 1a4:	0e c0       	rjmp	.+28     	; 0x1c2 <__vector_3+0x6a>
		// Activar Timer.
		Bandera_1 = 1;// Activar decremento de display
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <Bandera_1>
		Bandera_2 = 0;
 1ac:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <Bandera_2>
		counter = 6;
 1b0:	86 e0       	ldi	r24, 0x06	; 6
 1b2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		P1_BLUE = 0;
 1b6:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <P1_BLUE>
		P2_RED = 0;
 1ba:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <P2_RED>
		debounce_delay();// Antirrebote
 1be:	0e 94 53 00 	call	0xa6	; 0xa6 <debounce_delay>
		
	}
}
 1c2:	ff 91       	pop	r31
 1c4:	ef 91       	pop	r30
 1c6:	bf 91       	pop	r27
 1c8:	af 91       	pop	r26
 1ca:	9f 91       	pop	r25
 1cc:	8f 91       	pop	r24
 1ce:	7f 91       	pop	r23
 1d0:	6f 91       	pop	r22
 1d2:	5f 91       	pop	r21
 1d4:	4f 91       	pop	r20
 1d6:	3f 91       	pop	r19
 1d8:	2f 91       	pop	r18
 1da:	0f 90       	pop	r0
 1dc:	0f be       	out	0x3f, r0	; 63
 1de:	0f 90       	pop	r0
 1e0:	1f 90       	pop	r1
 1e2:	18 95       	reti

000001e4 <pcint_init>:

void pcint_init() {
	PCICR |= (1 << PCIE0);       // Habilitar interrupciones de cambio de pin para PCINT[7:0]
 1e4:	e8 e6       	ldi	r30, 0x68	; 104
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	80 81       	ld	r24, Z
 1ea:	81 60       	ori	r24, 0x01	; 1
 1ec:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT0) | (1 << PCINT1) | (1 << PCINT2);  // Habilitar interrupción para PB0, PB1, PB2
 1ee:	eb e6       	ldi	r30, 0x6B	; 107
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 81       	ld	r24, Z
 1f4:	87 60       	ori	r24, 0x07	; 7
 1f6:	80 83       	st	Z, r24
 1f8:	08 95       	ret

000001fa <main>:
}

int main(void) {
	// Configuración del puerto D como salida
	DDRD = 0xFF;  // Todos los pines del puerto D son salidas
 1fa:	8f ef       	ldi	r24, 0xFF	; 255
 1fc:	8a b9       	out	0x0a, r24	; 10

	// Configuración de los pines PC3, PC4 y PC5 como salida
	DDRC |= (1 << PC3) | (1 << PC4) | (1 << PC5);  // PC3, PC4 y PC5 como salidas
 1fe:	87 b1       	in	r24, 0x07	; 7
 200:	88 63       	ori	r24, 0x38	; 56
 202:	87 b9       	out	0x07, r24	; 7

	// Configuración de PB0, PB1, PB2 como entradas con resistencias pull-up
	DDRB &= ~((1 << PB0) | (1 << PB1) | (1 << PB2));  // PB0, PB1, PB2 como entradas
 204:	84 b1       	in	r24, 0x04	; 4
 206:	88 7f       	andi	r24, 0xF8	; 248
 208:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PB0) | (1 << PB1) | (1 << PB2);   // Resistencias pull-up en PB0, PB1, PB2
 20a:	85 b1       	in	r24, 0x05	; 5
 20c:	87 60       	ori	r24, 0x07	; 7
 20e:	85 b9       	out	0x05, r24	; 5

	// Inicializar interrupciones de puerto B (botones)
	pcint_init();
 210:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <pcint_init>

	// Habilitar interrupciones globales
	sei();
 214:	78 94       	sei
 216:	34 c0       	rjmp	.+104    	; 0x280 <main+0x86>
	// Bucle principal
	while (1) {
		// Control de Timer
		while (Bandera_1) {
			//Controlar cremento de jugadores
			P1_BLUE = 0;
 218:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <P1_BLUE>
			P2_RED = 0;
 21c:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <P2_RED>
			
			// Mostrar valores en Display de Timer (cuenta regresiva)
			PORTC |= (1 << PC5);   // BJT_Display en alto
 220:	88 b1       	in	r24, 0x08	; 8
 222:	80 62       	ori	r24, 0x20	; 32
 224:	88 b9       	out	0x08, r24	; 8
			PORTC &= ~((1 << PC3) | (1 << PC4));  // BJT_BLUE y BJT_RED en bajo
 226:	88 b1       	in	r24, 0x08	; 8
 228:	87 7e       	andi	r24, 0xE7	; 231
 22a:	88 b9       	out	0x08, r24	; 8
			
			PORTD = fila_1[counter];  // Mostrar valores en Display de Timer
 22c:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	ea 5f       	subi	r30, 0xFA	; 250
 234:	fe 4f       	sbci	r31, 0xFE	; 254
 236:	80 81       	ld	r24, Z
 238:	8b b9       	out	0x0b, r24	; 11
			
			Bandera_1 = (counter == 0) ? 0 : 1;  // Desactivar Bandera_1 cuando counter llega a 0
 23a:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	91 11       	cpse	r25, r1
 242:	01 c0       	rjmp	.+2      	; 0x246 <main+0x4c>
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <Bandera_1>
			Bandera_2 = (counter == 0) ? 1 : 0;  // Activar Bandera_2 cuando counter llega a 0
 24a:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	91 11       	cpse	r25, r1
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <Bandera_2>
 258:	2f e7       	ldi	r18, 0x7F	; 127
 25a:	87 ec       	ldi	r24, 0xC7	; 199
 25c:	90 e3       	ldi	r25, 0x30	; 48
 25e:	21 50       	subi	r18, 0x01	; 1
 260:	80 40       	sbci	r24, 0x00	; 0
 262:	90 40       	sbci	r25, 0x00	; 0
 264:	e1 f7       	brne	.-8      	; 0x25e <main+0x64>
 266:	00 c0       	rjmp	.+0      	; 0x268 <main+0x6e>
 268:	00 00       	nop
			
			_delay_ms(999);  // Esperar 1 segundo (timer)
			
			counter--;  // Decrementar contador
 26a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 26e:	81 50       	subi	r24, 0x01	; 1
 270:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 274:	8f e9       	ldi	r24, 0x9F	; 159
 276:	9f e0       	ldi	r25, 0x0F	; 15
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <main+0x7e>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <main+0x84>
 27e:	00 00       	nop
	sei();

	// Bucle principal
	while (1) {
		// Control de Timer
		while (Bandera_1) {
 280:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <Bandera_1>
 284:	88 23       	and	r24, r24
 286:	49 f1       	breq	.+82     	; 0x2da <main+0xe0>
 288:	c7 cf       	rjmp	.-114    	; 0x218 <main+0x1e>
		}

		// Control de estados para Bandera_2
		while (Bandera_2) {
			// BJT_Display en bajo, mostrar valores alternativos en Display
			PORTC |= (1 << PC3);   // BJT_BLUE en alto
 28a:	88 b1       	in	r24, 0x08	; 8
 28c:	88 60       	ori	r24, 0x08	; 8
 28e:	88 b9       	out	0x08, r24	; 8
			PORTC &= ~((1 << PC5) | (1 << PC4));  // BJT_Display y BJT_RED en bajo
 290:	88 b1       	in	r24, 0x08	; 8
 292:	8f 7c       	andi	r24, 0xCF	; 207
 294:	88 b9       	out	0x08, r24	; 8
			PORTD = fila_2[P1_BLUE];  // Mostrar valores en Display
 296:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <P1_BLUE>
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	ef 5f       	subi	r30, 0xFF	; 255
 29e:	fe 4f       	sbci	r31, 0xFE	; 254
 2a0:	80 81       	ld	r24, Z
 2a2:	8b b9       	out	0x0b, r24	; 11
 2a4:	8f eb       	ldi	r24, 0xBF	; 191
 2a6:	9d e5       	ldi	r25, 0x5D	; 93
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <main+0xae>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <main+0xb4>
 2ae:	00 00       	nop
			_delay_ms(6);

			// BJT_Display en bajo, mostrar valores alternativos en Display
			PORTC |= (1 << PC4);   // BJT_RED en alto
 2b0:	88 b1       	in	r24, 0x08	; 8
 2b2:	80 61       	ori	r24, 0x10	; 16
 2b4:	88 b9       	out	0x08, r24	; 8
			PORTC &= ~((1 << PC3) | (1 << PC5));  // BJT_Display y BJT_BLUE en bajo
 2b6:	88 b1       	in	r24, 0x08	; 8
 2b8:	87 7d       	andi	r24, 0xD7	; 215
 2ba:	88 b9       	out	0x08, r24	; 8
			PORTD = fila_2[P2_RED];  // Mostrar valores en Display
 2bc:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <P2_RED>
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	ef 5f       	subi	r30, 0xFF	; 255
 2c4:	fe 4f       	sbci	r31, 0xFE	; 254
 2c6:	80 81       	ld	r24, Z
 2c8:	8b b9       	out	0x0b, r24	; 11
 2ca:	8f eb       	ldi	r24, 0xBF	; 191
 2cc:	9d e5       	ldi	r25, 0x5D	; 93
 2ce:	01 97       	sbiw	r24, 0x01	; 1
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <main+0xd4>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <main+0xda>
 2d4:	00 00       	nop
			_delay_ms(6);
			
			Winner();
 2d6:	0e 94 92 00 	call	0x124	; 0x124 <Winner>
			counter--;  // Decrementar contador
			_delay_ms(1);
		}

		// Control de estados para Bandera_2
		while (Bandera_2) {
 2da:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <Bandera_2>
 2de:	81 11       	cpse	r24, r1
 2e0:	d4 cf       	rjmp	.-88     	; 0x28a <main+0x90>
 2e2:	ce cf       	rjmp	.-100    	; 0x280 <main+0x86>

000002e4 <_exit>:
 2e4:	f8 94       	cli

000002e6 <__stop_program>:
 2e6:	ff cf       	rjmp	.-2      	; 0x2e6 <__stop_program>
