
LAB_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000252  000002e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000252  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080010c  0080010c  000002f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000324  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000949  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006dd  00000000  00000000  00000cdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003af  00000000  00000000  000013ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000060  00000000  00000000  0000176c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041b  00000000  00000000  000017cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000024c  00000000  00000000  00001be7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001e33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e5       	ldi	r30, 0x52	; 82
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 31       	cpi	r26, 0x10	; 16
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b8 00 	call	0x170	; 0x170 <main>
  9e:	0c 94 27 01 	jmp	0x24e	; 0x24e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_3>:
volatile uint8_t Bandera_1 = 0;
volatile uint8_t Bandera_2 = 0;
volatile uint8_t P2_RED = 0;
volatile uint8_t P1_BLUE = 0;

ISR(PCINT0_vect) {
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
	// Comprobar si el botón en PB0 está presionado (PB0 es bajo)
	if (!(PINB & (1 << PB0))) {
  b6:	18 99       	sbic	0x03, 0	; 3
  b8:	1c c0       	rjmp	.+56     	; 0xf2 <__vector_3+0x4c>
		if (Bandera_2 == 1) {
  ba:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <Bandera_2>
  be:	81 30       	cpi	r24, 0x01	; 1
  c0:	c1 f4       	brne	.+48     	; 0xf2 <__vector_3+0x4c>
			P2_RED++;// Incremento de jugador dos
  c2:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <P2_RED>
  c6:	8f 5f       	subi	r24, 0xFF	; 255
  c8:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <P2_RED>
			P2_RED = (P2_RED > 4) ? 0 : P2_RED;// Evitar que sobre pase 5
  cc:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <P2_RED>
  d0:	85 30       	cpi	r24, 0x05	; 5
  d2:	18 f4       	brcc	.+6      	; 0xda <__vector_3+0x34>
  d4:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <P2_RED>
  d8:	01 c0       	rjmp	.+2      	; 0xdc <__vector_3+0x36>
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <P2_RED>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	82 e5       	ldi	r24, 0x52	; 82
  e4:	97 e0       	ldi	r25, 0x07	; 7
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <__vector_3+0x40>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <__vector_3+0x4a>
  f0:	00 00       	nop
			_delay_ms(150); // Antirebote
		}
	}
	
	// Comprobar si el botón en PB1 está presionado (PB1 es bajo)
	if (!(PINB & (1 << PB1))) {
  f2:	19 99       	sbic	0x03, 1	; 3
  f4:	1c c0       	rjmp	.+56     	; 0x12e <__vector_3+0x88>
		if (Bandera_2 == 1) {
  f6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <Bandera_2>
  fa:	81 30       	cpi	r24, 0x01	; 1
  fc:	c1 f4       	brne	.+48     	; 0x12e <__vector_3+0x88>
			P1_BLUE++;// Incremento de jugador uno
  fe:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 102:	8f 5f       	subi	r24, 0xFF	; 255
 104:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
			P1_BLUE = (P1_BLUE > 4) ? 0 : P1_BLUE;// Evitar que sobre pase 5
 108:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 10c:	85 30       	cpi	r24, 0x05	; 5
 10e:	18 f4       	brcc	.+6      	; 0x116 <__vector_3+0x70>
 110:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 114:	01 c0       	rjmp	.+2      	; 0x118 <__vector_3+0x72>
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 11c:	2f ef       	ldi	r18, 0xFF	; 255
 11e:	82 e5       	ldi	r24, 0x52	; 82
 120:	97 e0       	ldi	r25, 0x07	; 7
 122:	21 50       	subi	r18, 0x01	; 1
 124:	80 40       	sbci	r24, 0x00	; 0
 126:	90 40       	sbci	r25, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <__vector_3+0x7c>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <__vector_3+0x86>
 12c:	00 00       	nop
			_delay_ms(150);// Antirebote
		}
	}

	// Comprobar si el botón en PB2 está presionado (PB2 es bajo)
	if (!(PINB & (1 << PB2))) {
 12e:	1a 99       	sbic	0x03, 2	; 3
 130:	0c c0       	rjmp	.+24     	; 0x14a <__vector_3+0xa4>
		// Activar Timer.
		Bandera_1 = 1;// Activar decremento de display
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <Bandera_1>
 138:	2f ef       	ldi	r18, 0xFF	; 255
 13a:	81 ee       	ldi	r24, 0xE1	; 225
 13c:	94 e0       	ldi	r25, 0x04	; 4
 13e:	21 50       	subi	r18, 0x01	; 1
 140:	80 40       	sbci	r24, 0x00	; 0
 142:	90 40       	sbci	r25, 0x00	; 0
 144:	e1 f7       	brne	.-8      	; 0x13e <__vector_3+0x98>
 146:	00 c0       	rjmp	.+0      	; 0x148 <__vector_3+0xa2>
 148:	00 00       	nop
		_delay_ms(100);// Antirebote
		
	}
}
 14a:	9f 91       	pop	r25
 14c:	8f 91       	pop	r24
 14e:	2f 91       	pop	r18
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <pcint_init>:

void pcint_init() {
	PCICR |= (1 << PCIE0);       // Habilitar interrupciones de cambio de pin para PCINT[7:0]
 15a:	e8 e6       	ldi	r30, 0x68	; 104
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	81 60       	ori	r24, 0x01	; 1
 162:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT0) | (1 << PCINT1) | (1 << PCINT2);  // Habilitar interrupción para PB0, PB1, PB2
 164:	eb e6       	ldi	r30, 0x6B	; 107
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	87 60       	ori	r24, 0x07	; 7
 16c:	80 83       	st	Z, r24
 16e:	08 95       	ret

00000170 <main>:
}

int main(void) {
	// Configuración del puerto D como salida
	DDRD = 0xFF;  // Todos los pines del puerto D son salidas
 170:	8f ef       	ldi	r24, 0xFF	; 255
 172:	8a b9       	out	0x0a, r24	; 10

	// Configuración de los pines PC3, PC4 y PC5 como salida
	DDRC |= (1 << PC3) | (1 << PC4) | (1 << PC5);  // PC3, PC4 y PC5 como salidas
 174:	87 b1       	in	r24, 0x07	; 7
 176:	88 63       	ori	r24, 0x38	; 56
 178:	87 b9       	out	0x07, r24	; 7

	// Configuración de PB0, PB1, PB2 como entradas con resistencias pull-up
	DDRB &= ~((1 << PB0) | (1 << PB1) | (1 << PB2));  // PB0, PB1, PB2 como entradas
 17a:	84 b1       	in	r24, 0x04	; 4
 17c:	88 7f       	andi	r24, 0xF8	; 248
 17e:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PB0) | (1 << PB1) | (1 << PB2);   // Resistencias pull-up en PB0, PB1, PB2
 180:	85 b1       	in	r24, 0x05	; 5
 182:	87 60       	ori	r24, 0x07	; 7
 184:	85 b9       	out	0x05, r24	; 5

	// Inicializar interrupciones de puerto B (botones)
	pcint_init();
 186:	0e 94 ad 00 	call	0x15a	; 0x15a <pcint_init>

	// Habilitar interrupciones globales
	sei();
 18a:	78 94       	sei
 18c:	30 c0       	rjmp	.+96     	; 0x1ee <main+0x7e>
	// Bucle principal
	while (1) {
		// Control de Timer
		while (Bandera_1) {
			// Mostrar valores en Display de Timer (cuenta regresiva)
			PORTC |= (1 << PC5);   // BJT_Display en alto
 18e:	88 b1       	in	r24, 0x08	; 8
 190:	80 62       	ori	r24, 0x20	; 32
 192:	88 b9       	out	0x08, r24	; 8
			PORTC &= ~((1 << PC3) | (1 << PC4));  // BJT_BLUE y BJT_RED en bajo
 194:	88 b1       	in	r24, 0x08	; 8
 196:	87 7e       	andi	r24, 0xE7	; 231
 198:	88 b9       	out	0x08, r24	; 8
			
			PORTD = fila_1[counter];  // Mostrar valores en Display de Timer
 19a:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	ea 5f       	subi	r30, 0xFA	; 250
 1a2:	fe 4f       	sbci	r31, 0xFE	; 254
 1a4:	80 81       	ld	r24, Z
 1a6:	8b b9       	out	0x0b, r24	; 11
			
			Bandera_1 = (counter == 0) ? 0 : 1;  // Desactivar Bandera_1 cuando counter llega a 0
 1a8:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	91 11       	cpse	r25, r1
 1b0:	01 c0       	rjmp	.+2      	; 0x1b4 <main+0x44>
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <Bandera_1>
			Bandera_2 = (counter == 0) ? 1 : 0;  // Activar Bandera_2 cuando counter llega a 0
 1b8:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	91 11       	cpse	r25, r1
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <Bandera_2>
 1c6:	2f e7       	ldi	r18, 0x7F	; 127
 1c8:	87 ec       	ldi	r24, 0xC7	; 199
 1ca:	90 e3       	ldi	r25, 0x30	; 48
 1cc:	21 50       	subi	r18, 0x01	; 1
 1ce:	80 40       	sbci	r24, 0x00	; 0
 1d0:	90 40       	sbci	r25, 0x00	; 0
 1d2:	e1 f7       	brne	.-8      	; 0x1cc <main+0x5c>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <main+0x66>
 1d6:	00 00       	nop
			
			_delay_ms(999);  // Esperar 1 segundo (timer)
			
			counter--;  // Decrementar contador
 1d8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1dc:	81 50       	subi	r24, 0x01	; 1
 1de:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1e2:	8f e9       	ldi	r24, 0x9F	; 159
 1e4:	9f e0       	ldi	r25, 0x0F	; 15
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <main+0x76>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <main+0x7c>
 1ec:	00 00       	nop
	sei();

	// Bucle principal
	while (1) {
		// Control de Timer
		while (Bandera_1) {
 1ee:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <Bandera_1>
 1f2:	88 23       	and	r24, r24
 1f4:	39 f1       	breq	.+78     	; 0x244 <main+0xd4>
 1f6:	cb cf       	rjmp	.-106    	; 0x18e <main+0x1e>
		}

		// Control de estados para Bandera_2
		while (Bandera_2) {
			// BJT_Display en bajo, mostrar valores alternativos en Display
			PORTC |= (1 << PC3);   // BJT_BLUE en alto
 1f8:	88 b1       	in	r24, 0x08	; 8
 1fa:	88 60       	ori	r24, 0x08	; 8
 1fc:	88 b9       	out	0x08, r24	; 8
			PORTC &= ~((1 << PC5) | (1 << PC4));  // BJT_Display y BJT_RED en bajo
 1fe:	88 b1       	in	r24, 0x08	; 8
 200:	8f 7c       	andi	r24, 0xCF	; 207
 202:	88 b9       	out	0x08, r24	; 8
			PORTD = fila_2[P1_BLUE];  // Mostrar valores en Display
 204:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <__data_end>
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	ef 5f       	subi	r30, 0xFF	; 255
 20c:	fe 4f       	sbci	r31, 0xFE	; 254
 20e:	80 81       	ld	r24, Z
 210:	8b b9       	out	0x0b, r24	; 11
 212:	8f eb       	ldi	r24, 0xBF	; 191
 214:	9d e5       	ldi	r25, 0x5D	; 93
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <main+0xa6>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <main+0xac>
 21c:	00 00       	nop
			_delay_ms(6);

			// BJT_Display en bajo, mostrar valores alternativos en Display
			PORTC |= (1 << PC4);   // BJT_RED en alto
 21e:	88 b1       	in	r24, 0x08	; 8
 220:	80 61       	ori	r24, 0x10	; 16
 222:	88 b9       	out	0x08, r24	; 8
			PORTC &= ~((1 << PC3) | (1 << PC5));  // BJT_Display y BJT_BLUE en bajo
 224:	88 b1       	in	r24, 0x08	; 8
 226:	87 7d       	andi	r24, 0xD7	; 215
 228:	88 b9       	out	0x08, r24	; 8
			PORTD = fila_2[P2_RED];  // Mostrar valores en Display
 22a:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <P2_RED>
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	ef 5f       	subi	r30, 0xFF	; 255
 232:	fe 4f       	sbci	r31, 0xFE	; 254
 234:	80 81       	ld	r24, Z
 236:	8b b9       	out	0x0b, r24	; 11
 238:	8f eb       	ldi	r24, 0xBF	; 191
 23a:	9d e5       	ldi	r25, 0x5D	; 93
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <main+0xcc>
 240:	00 c0       	rjmp	.+0      	; 0x242 <main+0xd2>
 242:	00 00       	nop
			counter--;  // Decrementar contador
			_delay_ms(1);
		}

		// Control de estados para Bandera_2
		while (Bandera_2) {
 244:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <Bandera_2>
 248:	81 11       	cpse	r24, r1
 24a:	d6 cf       	rjmp	.-84     	; 0x1f8 <main+0x88>
 24c:	d0 cf       	rjmp	.-96     	; 0x1ee <main+0x7e>

0000024e <_exit>:
 24e:	f8 94       	cli

00000250 <__stop_program>:
 250:	ff cf       	rjmp	.-2      	; 0x250 <__stop_program>
