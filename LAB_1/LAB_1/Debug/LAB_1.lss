
LAB_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000168  000001dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000168  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000745  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000664  00000000  00000000  000009d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b1  00000000  00000000  0000103d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  000012f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c5  00000000  00000000  00001374  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000078  00000000  00000000  00001739  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000017b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__vector_3>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__vector_11>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 94 00 	call	0x128	; 0x128 <main>
  8e:	0c 94 b2 00 	jmp	0x164	; 0x164 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <timer1_init>:
const uint8_t fila[] = {0x3F, 0x0C, 0x5B, 0x5D, 0x6C, 0x75};  // Valores para los pines de PORTD


void timer1_init() {
	// Configurar el Timer1 en modo CTC
	TCCR1B |= (1 << WGM12);  // Configurar el modo CTC (Clear Timer on Compare Match)
  96:	e1 e8       	ldi	r30, 0x81	; 129
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	88 60       	ori	r24, 0x08	; 8
  9e:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A);  // Habilitar la interrupción por comparación del OCR1A
  a0:	af e6       	ldi	r26, 0x6F	; 111
  a2:	b0 e0       	ldi	r27, 0x00	; 0
  a4:	8c 91       	ld	r24, X
  a6:	82 60       	ori	r24, 0x02	; 2
  a8:	8c 93       	st	X, r24
	OCR1A = 15624;  // Valor de comparación para generar una interrupción cada segundo (con prescaler 1024)
  aa:	88 e0       	ldi	r24, 0x08	; 8
  ac:	9d e3       	ldi	r25, 0x3D	; 61
  ae:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  b2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCCR1B |= (1 << CS12) | (1 << CS10);  // Configurar el prescaler en 1024
  b6:	80 81       	ld	r24, Z
  b8:	85 60       	ori	r24, 0x05	; 5
  ba:	80 83       	st	Z, r24
  bc:	08 95       	ret

000000be <__vector_11>:
}

ISR(TIMER1_COMPA_vect) {
  be:	1f 92       	push	r1
  c0:	0f 92       	push	r0
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	0f 92       	push	r0
  c6:	11 24       	eor	r1, r1
  c8:	8f 93       	push	r24
	if (counter > 0) {
  ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ce:	88 23       	and	r24, r24
  d0:	29 f0       	breq	.+10     	; 0xdc <__vector_11+0x1e>
		counter--;  // Decrementar el contador
  d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  d6:	81 50       	subi	r24, 0x01	; 1
  d8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
  dc:	8f 91       	pop	r24
  de:	0f 90       	pop	r0
  e0:	0f be       	out	0x3f, r0	; 63
  e2:	0f 90       	pop	r0
  e4:	1f 90       	pop	r1
  e6:	18 95       	reti

000000e8 <__vector_3>:

ISR(PCINT0_vect) {
  e8:	1f 92       	push	r1
  ea:	0f 92       	push	r0
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	0f 92       	push	r0
  f0:	11 24       	eor	r1, r1
  f2:	8f 93       	push	r24
	// Comprobar si el botón en PB0 está presionado (PB0 es bajo)
	if (!(PINB & (1 << PB0))) {
  f4:	18 99       	sbic	0x03, 0	; 3
  f6:	02 c0       	rjmp	.+4      	; 0xfc <__vector_3+0x14>
		PORTD = 0xFF;  
  f8:	8f ef       	ldi	r24, 0xFF	; 255
  fa:	8b b9       	out	0x0b, r24	; 11
	}
	// Comprobar si el botón en PB1 está presionado (PB1 es bajo)
	if (!(PINB & (1 << PB1))) {
  fc:	19 99       	sbic	0x03, 1	; 3
  fe:	02 c0       	rjmp	.+4      	; 0x104 <__vector_3+0x1c>
		PORTD = 0x0C; 
 100:	8c e0       	ldi	r24, 0x0C	; 12
 102:	8b b9       	out	0x0b, r24	; 11
	}
		
	// Comprobar si el botón en PB2 está presionado (PB1 es bajo)
	if (!(PINB & (1 << PB2))) {
 104:	83 b1       	in	r24, 0x03	; 3
		// Activar Timer.
		 
	}
	
}
 106:	8f 91       	pop	r24
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <pcint_init>:

void pcint_init() {
	PCICR |= (1 << PCIE0);  // Habilitar interrupciones de cambio de pin para PCINT[7:0]
 112:	e8 e6       	ldi	r30, 0x68	; 104
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	81 60       	ori	r24, 0x01	; 1
 11a:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT0) | (1 << PCINT1) | (1 << PCINT2);  // Habilitar interrupción para PCINT0 (PB0), PCINT1 (PB1) Y PCINT2 (PB2)
 11c:	eb e6       	ldi	r30, 0x6B	; 107
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	87 60       	ori	r24, 0x07	; 7
 124:	80 83       	st	Z, r24
 126:	08 95       	ret

00000128 <main>:
}

int main(void) {
	// Configuración del puerto D como salida
	DDRD = 0xFF;  // 0xFF en binario es 11111111, lo que significa que todos los pines del puerto D son configurados como salida
 128:	8f ef       	ldi	r24, 0xFF	; 255
 12a:	8a b9       	out	0x0a, r24	; 10
	
	// Configuración de los pines PC3, PC4 y PC5 como salida
	DDRC |= (1 << PC3) | (1 << PC4) | (1 << PC5);  // Configura PC3, PC4 y PC5 como salidas
 12c:	87 b1       	in	r24, 0x07	; 7
 12e:	88 63       	ori	r24, 0x38	; 56
 130:	87 b9       	out	0x07, r24	; 7
	
	// Configuración de PB0, PB1, PB2 como entradas con resistencias pull-up
	DDRB &= ~((1 << PB0) | (1 << PB1) | (1 << PB2));  // Configura PB0, PB1, PB2 como entradas
 132:	84 b1       	in	r24, 0x04	; 4
 134:	88 7f       	andi	r24, 0xF8	; 248
 136:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PB0) | (1 << PB1) | (1 << PB2);  // Habilita resistencias pull-up en PB0, PB1, PB2
 138:	85 b1       	in	r24, 0x05	; 5
 13a:	87 60       	ori	r24, 0x07	; 7
 13c:	85 b9       	out	0x05, r24	; 5
	
	
	pcint_init();
 13e:	0e 94 89 00 	call	0x112	; 0x112 <pcint_init>
	
	// Inicializar el timer
	timer1_init();
 142:	0e 94 4b 00 	call	0x96	; 0x96 <timer1_init>
	   
	// Habilitar interrupciones globales
	sei();
 146:	78 94       	sei
	// Bucle principal vacío
	while (1) {
		// Aquí puede ir el código adicional que quieras ejecutar continuamente
		
		//Establecer BJT_Display en alto (HIGH) y BJT_BLUE, BJT_RED en bajo (LOW)
		PORTC |= (1 << PC5);  // Establece PC5 en alto 
 148:	88 b1       	in	r24, 0x08	; 8
 14a:	80 62       	ori	r24, 0x20	; 32
 14c:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~((1 << PC3) | (1 << PC4));  // Establece PC3 y PC4 en bajo
 14e:	88 b1       	in	r24, 0x08	; 8
 150:	87 7e       	andi	r24, 0xE7	; 231
 152:	88 b9       	out	0x08, r24	; 8
		PORTD = fila[counter];// Mostrar valores en Display de Timer. 
 154:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	ef 5f       	subi	r30, 0xFF	; 255
 15c:	fe 4f       	sbci	r31, 0xFE	; 254
 15e:	80 81       	ld	r24, Z
 160:	8b b9       	out	0x0b, r24	; 11
 162:	f2 cf       	rjmp	.-28     	; 0x148 <main+0x20>

00000164 <_exit>:
 164:	f8 94       	cli

00000166 <__stop_program>:
 166:	ff cf       	rjmp	.-2      	; 0x166 <__stop_program>
