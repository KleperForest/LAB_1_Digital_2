
LAB_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000000ea  0000015e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000079e  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006fa  00000000  00000000  000009a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a9  00000000  00000000  0000109c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001348  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003fd  00000000  00000000  0000138c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000093  00000000  00000000  00001789  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000181c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ee       	ldi	r30, 0xEA	; 234
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  8e:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <init_GPIO>:
};

// Función para inicializar el puerto y configurar PB1 como entrada con pull-up
void init_GPIO() {
	// Configurar PB1 como entrada (botón) con pull-up
	DDRB &= ~(1 << PB1);    // PB1 como entrada
  96:	84 b1       	in	r24, 0x04	; 4
  98:	8d 7f       	andi	r24, 0xFD	; 253
  9a:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PB1);    // Habilitar pull-up en PB1
  9c:	85 b1       	in	r24, 0x05	; 5
  9e:	82 60       	ori	r24, 0x02	; 2
  a0:	85 b9       	out	0x05, r24	; 5
	
	// Configurar PD1 a PD7 como salidas para el display de 7 segmentos
	DDRD |= 0xFE;   // PD1 a PD7 como salidas (0xFE en binario es 11111110)
  a2:	8a b1       	in	r24, 0x0a	; 10
  a4:	8e 6f       	ori	r24, 0xFE	; 254
  a6:	8a b9       	out	0x0a, r24	; 10
  a8:	08 95       	ret

000000aa <display_number>:
}

// Función para mostrar un número en el display de 7 segmentos usando la tabla
void display_number(uint8_t number) {
	if (number <= 5) {
  aa:	86 30       	cpi	r24, 0x06	; 6
  ac:	38 f4       	brcc	.+14     	; 0xbc <display_number+0x12>
		PORTD = display_values[number];
  ae:	e8 2f       	mov	r30, r24
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	e0 50       	subi	r30, 0x00	; 0
  b4:	ff 4f       	sbci	r31, 0xFF	; 255
  b6:	80 81       	ld	r24, Z
  b8:	8b b9       	out	0x0b, r24	; 11
  ba:	08 95       	ret
		} else {
		// Apagar todos los segmentos si se recibe un número fuera del rango esperado
		PORTD = 0x00;
  bc:	1b b8       	out	0x0b, r1	; 11
  be:	08 95       	ret

000000c0 <main>:
	}
}

int main() {
	// Inicializar puertos y configuraciones
	init_GPIO();
  c0:	0e 94 4b 00 	call	0x96	; 0x96 <init_GPIO>
	// Variable para el contador
	uint8_t contador = 5;
	
	while (1) {
		// Verificar estado del botón en PB1 (se presiona cuando está en bajo debido al pull-up)
		if (!(PINB & (1 << PB1))) {
  c4:	19 99       	sbic	0x03, 1	; 3
  c6:	fe cf       	rjmp	.-4      	; 0xc4 <main+0x4>
  c8:	c5 e0       	ldi	r28, 0x05	; 5
			// Iniciar contador del 5 al 0 y mostrar en el display de 7 segmentos
			while (contador >= 0) {
				display_number(contador);
  ca:	8c 2f       	mov	r24, r28
  cc:	0e 94 55 00 	call	0xaa	; 0xaa <display_number>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	2f ef       	ldi	r18, 0xFF	; 255
  d2:	83 ed       	ldi	r24, 0xD3	; 211
  d4:	90 e3       	ldi	r25, 0x30	; 48
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	80 40       	sbci	r24, 0x00	; 0
  da:	90 40       	sbci	r25, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x16>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x20>
  e0:	00 00       	nop
				_delay_ms(1000);    // Esperar 1 segundo
				contador--;
  e2:	c1 50       	subi	r28, 0x01	; 1
  e4:	f2 cf       	rjmp	.-28     	; 0xca <main+0xa>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>
