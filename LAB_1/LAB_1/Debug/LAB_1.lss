
LAB_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000368  000003fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000368  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080010c  0080010c  00000408  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000438  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a6e  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006f5  00000000  00000000  00000f36  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004b4  00000000  00000000  0000162b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  00001ae0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000471  00000000  00000000  00001bac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000351  00000000  00000000  0000201d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000236e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 31       	cpi	r26, 0x12	; 18
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <main>
  9e:	0c 94 b2 01 	jmp	0x364	; 0x364 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <debounce_delay>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	2f ef       	ldi	r18, 0xFF	; 255
  a8:	82 e5       	ldi	r24, 0x52	; 82
  aa:	97 e0       	ldi	r25, 0x07	; 7
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	80 40       	sbci	r24, 0x00	; 0
  b0:	90 40       	sbci	r25, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <debounce_delay+0x6>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <debounce_delay+0x10>
  b6:	00 00       	nop
  b8:	08 95       	ret

000000ba <incrementar_contador_1>:
void debounce_delay() {
	_delay_ms(150);
}

void incrementar_contador_1() {
	if(Bandera_2 == 1)
  ba:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <Bandera_2>
  be:	81 30       	cpi	r24, 0x01	; 1
  c0:	a9 f4       	brne	.+42     	; 0xec <incrementar_contador_1+0x32>
	{P1_BLUE++;// Incremento de jugador uno
  c2:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <P1_BLUE>
  c6:	8f 5f       	subi	r24, 0xFF	; 255
  c8:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <P1_BLUE>
	Win_ner = (P1_BLUE > 4) ? 1 : 0; //Determinar ganador
  cc:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <P1_BLUE>
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	95 30       	cpi	r25, 0x05	; 5
  d4:	08 f4       	brcc	.+2      	; 0xd8 <incrementar_contador_1+0x1e>
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	Bandera_2 = (P1_BLUE > 4) ? 0 : 1;// Parar Carrera
  dc:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <P1_BLUE>
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	95 30       	cpi	r25, 0x05	; 5
  e4:	08 f0       	brcs	.+2      	; 0xe8 <incrementar_contador_1+0x2e>
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <Bandera_2>
  ec:	08 95       	ret

000000ee <incrementar_contador_2>:
	}
	
}

void incrementar_contador_2() {
	if(Bandera_2 == 1){
  ee:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <Bandera_2>
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	b1 f4       	brne	.+44     	; 0x122 <incrementar_contador_2+0x34>
	P2_RED++;// Incremento de jugador dos
  f6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <P2_RED>
  fa:	8f 5f       	subi	r24, 0xFF	; 255
  fc:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <P2_RED>
	Win_ner = (P2_RED > 4) ? 2 : 0; //Determinar ganador
 100:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <P2_RED>
 104:	85 30       	cpi	r24, 0x05	; 5
 106:	10 f0       	brcs	.+4      	; 0x10c <incrementar_contador_2+0x1e>
 108:	82 e0       	ldi	r24, 0x02	; 2
 10a:	01 c0       	rjmp	.+2      	; 0x10e <incrementar_contador_2+0x20>
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	Bandera_2 = (P2_RED > 4) ? 0 : 1;// Parar Carrera
 112:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <P2_RED>
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	95 30       	cpi	r25, 0x05	; 5
 11a:	08 f0       	brcs	.+2      	; 0x11e <incrementar_contador_2+0x30>
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <Bandera_2>
 122:	08 95       	ret

00000124 <Winner>:
	}
}

void Winner(){
	if (Win_ner == 1 || Win_ner == 2){
 124:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 128:	81 30       	cpi	r24, 0x01	; 1
 12a:	21 f0       	breq	.+8      	; 0x134 <Winner+0x10>
 12c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 130:	82 30       	cpi	r24, 0x02	; 2
 132:	39 f4       	brne	.+14     	; 0x142 <Winner+0x1e>
		Bandera_1 = 0;
 134:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <Bandera_1>
		Bandera_2 = 0;
 138:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <Bandera_2>
		Bandera_3 = 1;
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <Bandera_3>
 142:	08 95       	ret

00000144 <__vector_3>:
	}			
}
	
ISR(PCINT0_vect) {
 144:	1f 92       	push	r1
 146:	0f 92       	push	r0
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
 14e:	2f 93       	push	r18
 150:	3f 93       	push	r19
 152:	4f 93       	push	r20
 154:	5f 93       	push	r21
 156:	6f 93       	push	r22
 158:	7f 93       	push	r23
 15a:	8f 93       	push	r24
 15c:	9f 93       	push	r25
 15e:	af 93       	push	r26
 160:	bf 93       	push	r27
 162:	ef 93       	push	r30
 164:	ff 93       	push	r31
	// Comprobar si el botón en PB0 está presionado (PB0 es bajo)
	if (!(PINB & (1 << PB0))) {
 166:	18 99       	sbic	0x03, 0	; 3
 168:	08 c0       	rjmp	.+16     	; 0x17a <__vector_3+0x36>
		if (Bandera_2 == 1) {
 16a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <Bandera_2>
 16e:	81 30       	cpi	r24, 0x01	; 1
 170:	21 f4       	brne	.+8      	; 0x17a <__vector_3+0x36>
			incrementar_contador_2(); // incremento para jugador 2
 172:	0e 94 77 00 	call	0xee	; 0xee <incrementar_contador_2>
			debounce_delay();// Antirrebote
 176:	0e 94 53 00 	call	0xa6	; 0xa6 <debounce_delay>
		}
	}
	
	// Comprobar si el botón en PB1 está presionado (PB1 es bajo)
	if (!(PINB & (1 << PB1))) {
 17a:	19 99       	sbic	0x03, 1	; 3
 17c:	08 c0       	rjmp	.+16     	; 0x18e <__vector_3+0x4a>
		if (Bandera_2 == 1) {
 17e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <Bandera_2>
 182:	81 30       	cpi	r24, 0x01	; 1
 184:	21 f4       	brne	.+8      	; 0x18e <__vector_3+0x4a>
			incrementar_contador_1(); // incremento para jugador 1
 186:	0e 94 5d 00 	call	0xba	; 0xba <incrementar_contador_1>
			debounce_delay();// Antirrebote
 18a:	0e 94 53 00 	call	0xa6	; 0xa6 <debounce_delay>
		}
	}

	// Comprobar si el botón en PB2 está presionado (PB2 es bajo)
	if (!(PINB & (1 << PB2))) {
 18e:	1a 99       	sbic	0x03, 2	; 3
 190:	12 c0       	rjmp	.+36     	; 0x1b6 <__vector_3+0x72>
		// Activar Timer.
		Bandera_1 = 1;// Activar decremento de display
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <Bandera_1>
		Bandera_2 = 0;// Desactivar incremento de jugadores
 198:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <Bandera_2>
		Bandera_3 = 0;// Desactivar ganador.
 19c:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <Bandera_3>
		Win_ner = 0;
 1a0:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
		counter = 6; // Reiniciar contador
 1a4:	86 e0       	ldi	r24, 0x06	; 6
 1a6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		P1_BLUE = 0; // Reiniciar valor de jugador 1
 1aa:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <P1_BLUE>
		P2_RED = 0; // Reiniciar valor de jugador 2
 1ae:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <P2_RED>
		debounce_delay();// Antirrebote
 1b2:	0e 94 53 00 	call	0xa6	; 0xa6 <debounce_delay>
		
	}
}
 1b6:	ff 91       	pop	r31
 1b8:	ef 91       	pop	r30
 1ba:	bf 91       	pop	r27
 1bc:	af 91       	pop	r26
 1be:	9f 91       	pop	r25
 1c0:	8f 91       	pop	r24
 1c2:	7f 91       	pop	r23
 1c4:	6f 91       	pop	r22
 1c6:	5f 91       	pop	r21
 1c8:	4f 91       	pop	r20
 1ca:	3f 91       	pop	r19
 1cc:	2f 91       	pop	r18
 1ce:	0f 90       	pop	r0
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	0f 90       	pop	r0
 1d4:	1f 90       	pop	r1
 1d6:	18 95       	reti

000001d8 <pcint_init>:

void pcint_init() {
	PCICR |= (1 << PCIE0);       // Habilitar interrupciones de cambio de pin para PCINT[7:0]
 1d8:	e8 e6       	ldi	r30, 0x68	; 104
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	81 60       	ori	r24, 0x01	; 1
 1e0:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT0) | (1 << PCINT1) | (1 << PCINT2);  // Habilitar interrupción para PB0, PB1, PB2
 1e2:	eb e6       	ldi	r30, 0x6B	; 107
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	87 60       	ori	r24, 0x07	; 7
 1ea:	80 83       	st	Z, r24
 1ec:	08 95       	ret

000001ee <main>:
}

int main(void) {
	// Configuración del puerto D como salida
	DDRD = 0xFF;  // Todos los pines del puerto D son salidas
 1ee:	8f ef       	ldi	r24, 0xFF	; 255
 1f0:	8a b9       	out	0x0a, r24	; 10

	// Configuración de los pines PC3, PC4 y PC5 como salida
	DDRC |= (1 << PC3) | (1 << PC4) | (1 << PC5);  // PC3, PC4 y PC5 como salidas
 1f2:	87 b1       	in	r24, 0x07	; 7
 1f4:	88 63       	ori	r24, 0x38	; 56
 1f6:	87 b9       	out	0x07, r24	; 7

	// Configuración de PB0, PB1, PB2 como entradas con resistencias pull-up
	DDRB &= ~((1 << PB0) | (1 << PB1) | (1 << PB2));  // PB0, PB1, PB2 como entradas
 1f8:	84 b1       	in	r24, 0x04	; 4
 1fa:	88 7f       	andi	r24, 0xF8	; 248
 1fc:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PB0) | (1 << PB1) | (1 << PB2);   // Resistencias pull-up en PB0, PB1, PB2
 1fe:	85 b1       	in	r24, 0x05	; 5
 200:	87 60       	ori	r24, 0x07	; 7
 202:	85 b9       	out	0x05, r24	; 5

	// Inicializar interrupciones de puerto B (botones)
	pcint_init();
 204:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <pcint_init>

	// Habilitar interrupciones globales
	sei();
 208:	78 94       	sei
 20a:	34 c0       	rjmp	.+104    	; 0x274 <main+0x86>
	while (1) {
		// Control de Timer
		while (Bandera_1) {
			
			// Mostrar valores en Display de Timer (cuenta regresiva)
			PORTC |= (1 << PC5);   // BJT_Display en alto
 20c:	88 b1       	in	r24, 0x08	; 8
 20e:	80 62       	ori	r24, 0x20	; 32
 210:	88 b9       	out	0x08, r24	; 8
			PORTC &= ~((1 << PC3) | (1 << PC4));  // BJT_BLUE y BJT_RED en bajo
 212:	88 b1       	in	r24, 0x08	; 8
 214:	87 7e       	andi	r24, 0xE7	; 231
 216:	88 b9       	out	0x08, r24	; 8
			
			counter--;  // Decrementar contador
 218:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 21c:	81 50       	subi	r24, 0x01	; 1
 21e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			PORTD = fila_1[counter];  // Mostrar valores en Display de Timer
 222:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	ea 5f       	subi	r30, 0xFA	; 250
 22a:	fe 4f       	sbci	r31, 0xFE	; 254
 22c:	80 81       	ld	r24, Z
 22e:	8b b9       	out	0x0b, r24	; 11
			
			Bandera_1 = (counter == 0) ? 0 : 1;  // Desactivar Bandera_1 cuando counter llega a 0
 230:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	91 11       	cpse	r25, r1
 238:	01 c0       	rjmp	.+2      	; 0x23c <main+0x4e>
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <Bandera_1>
			Bandera_2 = (counter == 0) ? 1 : 0;  // Activar Bandera_2 cuando counter llega a 0
 240:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	91 11       	cpse	r25, r1
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <Bandera_2>
 24e:	2f e7       	ldi	r18, 0x7F	; 127
 250:	87 ec       	ldi	r24, 0xC7	; 199
 252:	90 e3       	ldi	r25, 0x30	; 48
 254:	21 50       	subi	r18, 0x01	; 1
 256:	80 40       	sbci	r24, 0x00	; 0
 258:	90 40       	sbci	r25, 0x00	; 0
 25a:	e1 f7       	brne	.-8      	; 0x254 <main+0x66>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <main+0x70>
 25e:	00 00       	nop
			
			_delay_ms(999);  // Esperar 1 segundo (timer)
			
			//Controlar cremento de jugadores
			P1_BLUE = 0;
 260:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <P1_BLUE>
			P2_RED = 0;
 264:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <P2_RED>
 268:	8f e9       	ldi	r24, 0x9F	; 159
 26a:	9f e0       	ldi	r25, 0x0F	; 15
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <main+0x7e>
 270:	00 c0       	rjmp	.+0      	; 0x272 <main+0x84>
 272:	00 00       	nop
	sei();

	// Bucle principal
	while (1) {
		// Control de Timer
		while (Bandera_1) {
 274:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <Bandera_1>
 278:	88 23       	and	r24, r24
 27a:	49 f1       	breq	.+82     	; 0x2ce <main+0xe0>
 27c:	c7 cf       	rjmp	.-114    	; 0x20c <main+0x1e>
		}

		// Control de estados para Bandera_2
		while (Bandera_2) {
			// BJT_Display en bajo, mostrar valores alternativos en Display
			PORTC |= (1 << PC3);   // BJT_BLUE en alto
 27e:	88 b1       	in	r24, 0x08	; 8
 280:	88 60       	ori	r24, 0x08	; 8
 282:	88 b9       	out	0x08, r24	; 8
			PORTC &= ~((1 << PC5) | (1 << PC4));  // BJT_Display y BJT_RED en bajo
 284:	88 b1       	in	r24, 0x08	; 8
 286:	8f 7c       	andi	r24, 0xCF	; 207
 288:	88 b9       	out	0x08, r24	; 8
			PORTD = fila_2[P1_BLUE];  // Mostrar valores en Display
 28a:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <P1_BLUE>
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	ef 5f       	subi	r30, 0xFF	; 255
 292:	fe 4f       	sbci	r31, 0xFE	; 254
 294:	80 81       	ld	r24, Z
 296:	8b b9       	out	0x0b, r24	; 11
 298:	8f eb       	ldi	r24, 0xBF	; 191
 29a:	9d e5       	ldi	r25, 0x5D	; 93
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <main+0xae>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <main+0xb4>
 2a2:	00 00       	nop
			_delay_ms(6);

			// BJT_Display en bajo, mostrar valores alternativos en Display
			PORTC |= (1 << PC4);   // BJT_RED en alto
 2a4:	88 b1       	in	r24, 0x08	; 8
 2a6:	80 61       	ori	r24, 0x10	; 16
 2a8:	88 b9       	out	0x08, r24	; 8
			PORTC &= ~((1 << PC3) | (1 << PC5));  // BJT_Display y BJT_BLUE en bajo
 2aa:	88 b1       	in	r24, 0x08	; 8
 2ac:	87 7d       	andi	r24, 0xD7	; 215
 2ae:	88 b9       	out	0x08, r24	; 8
			PORTD = fila_2[P2_RED];  // Mostrar valores en Display
 2b0:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <P2_RED>
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	ef 5f       	subi	r30, 0xFF	; 255
 2b8:	fe 4f       	sbci	r31, 0xFE	; 254
 2ba:	80 81       	ld	r24, Z
 2bc:	8b b9       	out	0x0b, r24	; 11
 2be:	8f eb       	ldi	r24, 0xBF	; 191
 2c0:	9d e5       	ldi	r25, 0x5D	; 93
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <main+0xd4>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <main+0xda>
 2c8:	00 00       	nop
			_delay_ms(6);
			
			Winner();
 2ca:	0e 94 92 00 	call	0x124	; 0x124 <Winner>
			P2_RED = 0;
			_delay_ms(1);
		}

		// Control de estados para Bandera_2
		while (Bandera_2) {
 2ce:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <Bandera_2>
 2d2:	81 11       	cpse	r24, r1
 2d4:	d4 cf       	rjmp	.-88     	; 0x27e <main+0x90>
 2d6:	41 c0       	rjmp	.+130    	; 0x35a <main+0x16c>
			Winner();

		}
		
		while(Bandera_3){
			if (Win_ner == 1){
 2d8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 2dc:	81 30       	cpi	r24, 0x01	; 1
 2de:	e9 f4       	brne	.+58     	; 0x31a <main+0x12c>
				// Mostrar valores en Display de Timer (cuenta regresiva)
				PORTC |= (1 << PC5);   // BJT_Display en alto
 2e0:	88 b1       	in	r24, 0x08	; 8
 2e2:	80 62       	ori	r24, 0x20	; 32
 2e4:	88 b9       	out	0x08, r24	; 8
				PORTC &= ~((1 << PC3) | (1 << PC4));  // BJT_BLUE y BJT_RED en bajo
 2e6:	88 b1       	in	r24, 0x08	; 8
 2e8:	87 7e       	andi	r24, 0xE7	; 231
 2ea:	88 b9       	out	0x08, r24	; 8
				PORTD = fila_1[1];  // Mostrar valores en Display de Timer
 2ec:	8c e0       	ldi	r24, 0x0C	; 12
 2ee:	8b b9       	out	0x0b, r24	; 11
 2f0:	8f eb       	ldi	r24, 0xBF	; 191
 2f2:	9d e5       	ldi	r25, 0x5D	; 93
 2f4:	01 97       	sbiw	r24, 0x01	; 1
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <main+0x106>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <main+0x10c>
 2fa:	00 00       	nop
				_delay_ms(6);
				// LED azules
				PORTC |= (1 << PC3);   // BJT_Blue en alto
 2fc:	88 b1       	in	r24, 0x08	; 8
 2fe:	88 60       	ori	r24, 0x08	; 8
 300:	88 b9       	out	0x08, r24	; 8
				PORTC &= ~((1 << PC5) | (1 << PC4));  // BJT_Display y BJT_RED en bajo
 302:	88 b1       	in	r24, 0x08	; 8
 304:	8f 7c       	andi	r24, 0xCF	; 207
 306:	88 b9       	out	0x08, r24	; 8
				PORTD = 0xF0;  // Mostrar valores en Display de Timer
 308:	80 ef       	ldi	r24, 0xF0	; 240
 30a:	8b b9       	out	0x0b, r24	; 11
 30c:	8f eb       	ldi	r24, 0xBF	; 191
 30e:	9d e5       	ldi	r25, 0x5D	; 93
 310:	01 97       	sbiw	r24, 0x01	; 1
 312:	f1 f7       	brne	.-4      	; 0x310 <main+0x122>
 314:	00 c0       	rjmp	.+0      	; 0x316 <main+0x128>
 316:	00 00       	nop
 318:	20 c0       	rjmp	.+64     	; 0x35a <main+0x16c>
				_delay_ms(6);
			}
			else if (Win_ner == 2){
 31a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 31e:	82 30       	cpi	r24, 0x02	; 2
 320:	e1 f4       	brne	.+56     	; 0x35a <main+0x16c>
				// Mostrar valores en Display de Timer (cuenta regresiva)
				PORTC |= (1 << PC5);   // BJT_Display en alto
 322:	88 b1       	in	r24, 0x08	; 8
 324:	80 62       	ori	r24, 0x20	; 32
 326:	88 b9       	out	0x08, r24	; 8
				PORTC &= ~((1 << PC3) | (1 << PC4));  // BJT_BLUE y BJT_RED en bajo
 328:	88 b1       	in	r24, 0x08	; 8
 32a:	87 7e       	andi	r24, 0xE7	; 231
 32c:	88 b9       	out	0x08, r24	; 8
				PORTD = fila_1[2];  // Mostrar valores en Display de Timer
 32e:	8b e5       	ldi	r24, 0x5B	; 91
 330:	8b b9       	out	0x0b, r24	; 11
 332:	8f eb       	ldi	r24, 0xBF	; 191
 334:	9d e5       	ldi	r25, 0x5D	; 93
 336:	01 97       	sbiw	r24, 0x01	; 1
 338:	f1 f7       	brne	.-4      	; 0x336 <main+0x148>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <main+0x14e>
 33c:	00 00       	nop
				_delay_ms(6);
				// LED rojos
				PORTC |= (1 << PC4);   // BJT_Blue en alto
 33e:	88 b1       	in	r24, 0x08	; 8
 340:	80 61       	ori	r24, 0x10	; 16
 342:	88 b9       	out	0x08, r24	; 8
				PORTC &= ~((1 << PC5) | (1 << PC3));  // BJT_Display y BJT_RED en bajo
 344:	88 b1       	in	r24, 0x08	; 8
 346:	87 7d       	andi	r24, 0xD7	; 215
 348:	88 b9       	out	0x08, r24	; 8
				PORTD = 0xF0;  // Mostrar valores en Display de Timer
 34a:	80 ef       	ldi	r24, 0xF0	; 240
 34c:	8b b9       	out	0x0b, r24	; 11
 34e:	8f eb       	ldi	r24, 0xBF	; 191
 350:	9d e5       	ldi	r25, 0x5D	; 93
 352:	01 97       	sbiw	r24, 0x01	; 1
 354:	f1 f7       	brne	.-4      	; 0x352 <main+0x164>
 356:	00 c0       	rjmp	.+0      	; 0x358 <main+0x16a>
 358:	00 00       	nop
			
			Winner();

		}
		
		while(Bandera_3){
 35a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <Bandera_3>
 35e:	81 11       	cpse	r24, r1
 360:	bb cf       	rjmp	.-138    	; 0x2d8 <main+0xea>
 362:	88 cf       	rjmp	.-240    	; 0x274 <main+0x86>

00000364 <_exit>:
 364:	f8 94       	cli

00000366 <__stop_program>:
 366:	ff cf       	rjmp	.-2      	; 0x366 <__stop_program>
